[{"/var/www/html/netflixclone/src/index.js":"1","/var/www/html/netflixclone/src/App.js":"2","/var/www/html/netflixclone/src/Tmdb.js":"3","/var/www/html/netflixclone/src/components/MovieRow.js":"4","/var/www/html/netflixclone/src/components/FeaturedMovie.js":"5","/var/www/html/netflixclone/src/components/Header.js":"6"},{"size":196,"mtime":1610315044660,"results":"7","hashOfConfig":"8"},{"size":2115,"mtime":1610502119389,"results":"9","hashOfConfig":"8"},{"size":2619,"mtime":1610406829028,"results":"10","hashOfConfig":"8"},{"size":1774,"mtime":1610502179189,"results":"11","hashOfConfig":"8"},{"size":1902,"mtime":1610502718833,"results":"12","hashOfConfig":"8"},{"size":645,"mtime":1610494860204,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1usn8x",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"16"},"/var/www/html/netflixclone/src/index.js",[],["32","33"],"/var/www/html/netflixclone/src/App.js",["34"],"import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Tmdb from './Tmdb';\nimport MovieRow from './components/MovieRow';\nimport FeaturedMovie from \"./components/FeaturedMovie\";\nimport Header from './components/Header';\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n\n  useEffect(() => {\n    const loadAll = async () => {\n\n      // pegando a lista total\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n      // pegando a featured\n      let originals = list.filter(i=>i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      setFeaturedData(chosenInfo);\n    }\n\n    loadAll();\n\n  }, []);\n\n  useEffect(() => {\n    const scrollListener = () => {\n      if (window.scrollY > 10) {\n        setBlackHeader(true);\n      } else {\n        setBlackHeader(false);\n      }\n    }\n\n    window.addEventListener('scroll', scrollListener);\n\n    return () => {\n      window.removeEventListener('scroll', scrollListener);\n    }\n\n  }, []);\n\n  return (\n\n    <div className=\"page\">\n\n      <Header black={blackHeader} />\n      \n      {featuredData && \n\n        <FeaturedMovie item={featuredData} />\n        \n      }\n\n      <section className=\"lists\">\n\n        {movieList.map((item, key) => (\n\n          <MovieRow key={key} title={item.title} items={item.items} />\n\n        ))}\n\n      </section>\n\n      <footer>\n        <p>Feito por Matheus Nicoski, em: 12/01/2021</p>\n        <p>Direitos de image para Netflix</p>\n        <p>Dados e imagens utilizados do site: themoviedb.org</p>\n      </footer>\n\n      {movieList.length <= 0 &&\n\n        <div className=\"loading\">\n\n          <img src=\"https://media.wired.com/photos/592744d3f3e2356fd800bf00/master/w_2560%2Cc_limit/Netflix_LoadTime.gif\" alt=\"Carregando\"/>\n\n        </div>\n        \n      }\n\n    </div>\n  );\n\n}","/var/www/html/netflixclone/src/Tmdb.js",["35"],"const API_KEY = '0f8e33e19c8fc31f610caf6c893c9aa0';\nconst API_BASE = 'https://api.themoviedb.org/3';\nconst LANGUAGE = 'pt-BR';\n\n const basicFetch = async (endpoint) => {\n     const req = await fetch(`${API_BASE}${endpoint}`)\n     const json = await req.json();\n     \n     return json;\n }\n\nexport default\n{\n    getHomeList: async () => {\n        return [\n            {\n                slug: 'originals',\n                title: 'Originais do Netflix',\n                items: await basicFetch(`/discover/tv?with_network=123&language=${LANGUAGE}&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'trending',\n                title: 'Recomendados para Você',\n                items: await basicFetch(`/trending/all/week?language=${LANGUAGE}&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'toprated',\n                title: 'Em Alta',\n                items: await basicFetch(`/movie/top_rated?language=${LANGUAGE}&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'action',\n                title: 'Ação',\n                items: await basicFetch(`/discover/movie?with_genres=28&language=${LANGUAGE}&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'comedy',\n                title: 'Comédia',\n                items: await basicFetch(`/discover/movie?with_genres=35&language=${LANGUAGE}&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'horror',\n                title: 'Terror',\n                items: await basicFetch(`/discover/movie?with_genres=27&language=${LANGUAGE}&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'romance',\n                title: 'Romance',\n                items: await basicFetch(`/discover/movie?with_genres=10749&language=${LANGUAGE}&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'documentary',\n                title: 'Documentários',\n                items: await basicFetch(`/discover/movie?with_genres=99&language=${LANGUAGE}&api_key=${API_KEY}`)\n            },\n        ]\n    },\n\n    getMovieInfo: async (movieId, type) => {\n        let info = {};\n        \n        if (movieId) {\n            switch (type) {\n                case 'movie':\n                    info = await basicFetch(`/movie/${movieId}?language=${LANGUAGE}&api_key=${API_KEY}`);\n                break;\n                case 'tv':\n                    info = await basicFetch(`/tv/${movieId}?language=${LANGUAGE}&api_key=${API_KEY}`);\n                break;\n                default:\n                    info = null;\n            }\n        }\n\n        return info;\n    }\n}","/var/www/html/netflixclone/src/components/MovieRow.js",["36"],"import React, { useState } from 'react';\nimport './MovieRow.css';\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\n\nexport default ({title, items}) => {\n\n    const [scrollX, setScrollX] = useState(0);\n\n    const handleLeftArrow = () => {\n        let x = scrollX + Math.round(window.innerWidth / 2);\n        if (x > 0) {\n            x = 0;\n        }\n\n        setScrollX(x)\n\n    }\n\n    const handleRightArrow = () => {\n        let x = scrollX - Math.round(window.innerWidth / 2);\n        let listW = items.results.length * 150;\n        \n        if ((window.innerWidth - listW) > x) {\n            x = (window.innerWidth - listW) - 60;\n        }\n\n        setScrollX(x)\n    }\n\n    return (\n\n        <div className=\"movieRow\">\n            <h2>{title}</h2>\n\n            <div className=\"movieRow--left\" onClick={handleLeftArrow}>\n\n                <NavigateBeforeIcon style={{ fontSize: 50 }} />\n\n            </div>\n\n            <div className=\"movieRow--right\" onClick={handleRightArrow}>\n\n                <NavigateNextIcon style={{ fontSize: 50 }} />\n\n            </div>\n\n            <div className=\"movieRow--listarea\">\n\n                <div className=\"movieRow--list\" style={{ \n                    marginLeft: scrollX,\n                    width: items.results.length * 150\n                 }}>\n\n                    {items.results.length > 0 && items.results.map((item, key) => (\n\n                        <div key={key} className=\"movieRow--item\">\n\n                            <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title} />\n\n                        </div>\n\n                    ))}\n\n                </div>\n\n            </div>\n\n        </div>\n\n    );\n\n}","/var/www/html/netflixclone/src/components/FeaturedMovie.js",["37"],"import React from \"react\";\nimport  './FeaturedMovie.css';\n\nexport default ({item}) => {\n\n    let firstDate = new Date(item.first_air_date);\n    let genres = [];\n\n    for (let i in item.genres) {\n        genres.push(item.genres[i].name);\n    }\n\n    let description = item.overview;\n\n    if (description.length > 200) {\n        description = description.substring(0, 200) + '...';\n    }\n\n    return (\n        <section className=\"featured\" style={{\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n            backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`\n        }}>\n\n            <div className=\"featured--vertical\">\n\n                <div className=\"featured--horizontal\">\n                \n                    <div className=\"featured--name\">{item.original_name}</div>\n                    \n                    <div className=\"featured--info\">\n\n                        <div className=\"featured--points\">{item.vote_average} pontos</div>\n                        <div className=\"featured--year\">{firstDate.getFullYear()}</div>\n                        <div className=\"featured--seasons\">{item.number_of_seasons} temporada{item.number_of_seasons > 1 ? 's' : ''}</div>\n\n                    </div>\n\n                    <div className=\"featured--description\">{description}</div>\n                    \n                    <div className=\"featured--buttons\">\n\n                        <a href={`/watch/${item.id}`} className=\"featured--watchbutton\">▶ Assistir</a>\n                        <a href={`/list/add/${item.id}`} className=\"featured--mylistbutton\">+ Minha Lista</a>\n\n                    </div>\n                    \n                    <div className=\"featured--genres\">\n\n                        <strong>Gêneros:</strong> {genres.join(', ')}\n\n                    </div>\n\n                </div>\n\n            </div>\n\n        </section>\n    );\n}","/var/www/html/netflixclone/src/components/Header.js",["38"],"import React from 'react';\nimport './Header.css';\n\nexport default ({black}) => {\n\n    return (\n\n        <header className={black ? 'black' : ''}>\n\n            <div className=\"header--logo\">\n\n                <a href=\"/\">\n                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\" alt=\"Netflix\" />\n                </a>\n\n            </div>\n\n            <div className=\"header--user\">\n\n                <a href=\"/\">\n                    <img src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" alt=\"Usuario\" />\n                </a>\n\n            </div>\n\n        </header>\n    );\n\n}",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":8,"column":1,"nodeType":"45","endLine":91,"endColumn":2},{"ruleId":"43","severity":1,"message":"46","line":12,"column":1,"nodeType":"45","endLine":77,"endColumn":2},{"ruleId":"43","severity":1,"message":"44","line":6,"column":1,"nodeType":"45","endLine":73,"endColumn":2},{"ruleId":"43","severity":1,"message":"44","line":4,"column":1,"nodeType":"45","endLine":61,"endColumn":2},{"ruleId":"43","severity":1,"message":"44","line":4,"column":1,"nodeType":"45","endLine":29,"endColumn":2},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Assign object to a variable before exporting as module default","no-global-assign","no-unsafe-negation"]